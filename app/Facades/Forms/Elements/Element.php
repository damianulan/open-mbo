<?php

namespace App\Facades\Forms\Elements;

use Illuminate\Support\Str;
use Closure;

/**
 * Represents a html field to be generated by FormBuilder. It's a base class for more specific types of fields.
 *
 * @author Damian UÅ‚an <damian.ulan@protonmail.com>
 * @copyright 2024
 */
class Element
{

    public string $name;
    public string $type;
    public ?string $value = null;
    public ?string $template = null;

    public ?string $label = null;
    public ?string $placeholder = null;

    public array $classes = [];

    public bool $required = false;
    public bool $disabled = false;
    public bool $readonly = false;
    public bool $show = true;
    public string $autocomplete = '';

    public array $infos = [];
    public array $dangers = [];

    /**
     * Renders the html representation of the Element.
     *
     * @return View
     */
    public function render()
    {
        $template = $this->template ?? Str::lower((new \ReflectionClass($this))->getShortName());
        return view('components.forms.elements.'.$template, [
            'element' => $this,
            'classes' => $this->getClasses(),
        ]);
    }

    /**
     * Labels an Element as a required. This is not validation, only invokes visual effect.
     *
     * @return static
     */
    public function required(?Closure $callback = null): static
    {
        $this->required = true;
        if(!is_null($callback)){
            $this->required = (bool)$callback();
        }
        return $this;
    }

    /**
     * Marks an Element as disabled.
     *
     * @return static
     */
    public function disabled(): static
    {
        $this->disabled = true;
        return $this;
    }

    /**
     * Marks an Element as disabled.
     *
     * @return static
     */
    public function readonly(): static
    {
        $this->readonly = true;
        return $this;
    }

    /**
     * Sets html placeholder.
     *
     * @return static
     */
    public function placeholder(string $text): static
    {
        $this->placeholder = empty($text) ? null:$text;
        return $this;
    }

    /**
     * Sets html default value.
     *
     * @return static
     */
    public function value (string $value): static
    {
        $this->value = $value;
        return $this;
    }

    /**
     * Sets label text for an Element.
     *
     * @return static
     */
    public function label(string $text): static
    {
        $this->label = $text;
        return $this;
    }

    /**
     * Renders input label to html.
     *
     * @return string
     */
    public function getLabel()
    {
        if(!empty($this->label) && !empty($this->name)){
            return view('components.forms.label', [
                'label' => $this->label,
                'name' => $this->name,
                'required' => $this->required,
            ]);
        }
        return null;
    }

    public function class(... $classes)
    {
        if(!empty($classes))
        {
            foreach($classes as $class){
                $this->classes[] = $class;
            }
        }
        return $this;
    }

    private function getClasses()
    {
        return empty($this->classes) ? null:implode(' ', $this->classes);
    }

    /**
     * Generates tippy.js tooltip description for the field.
     *
     * @param  string $text
     * @return static
     */
    public function info(string $text): static
    {
        $this->infos[] = $text;
        return $this;
    }

    /**
     * Renders input label to html.
     *
     * @return string
     */
    public function getInfos()
    {
        if(!empty($this->infos)){
            $output = '';
            foreach($this->infos as $info){
                $output .= '<span class="info-box" data-tippy-content="'.$info.'"><i class="bi-info-circle-fill"></i></span>';
            }
            return $output;
        }
        return null;
    }

    /**
     * Sets html autocomplete setting
     *
     * @param  string $type
     * @return static
     */
    public function autocomplete(string $type): static
    {
        $this->autocomplete = $type;
        return $this;
    }
}
